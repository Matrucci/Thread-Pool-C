למי שרוצה כתבתי סקריפט בדיקות לתרגיל 4 במערכות הפעלה.
הוא מכסה את בדיקת השפיות שיש ב submit בהגשה וכמובן מוסיף עוד בדיקות לעוד מצבי קצה.
חשוב להגיד שהכנסתי רק טסטים דטרמיניסטיים כדי שטסטים תמיד יעברו למי שמימש את התרגיל יחסית טוב, אז *בוודאות* הסקריפט *לא* מכסה את כל המקרים *ולא* מחליף בדיקות ידניות שלכם עם הקוד שלכם.
אם יהיה לי זמן בהמשך אולי אני אוסיף גם בדיקה של valgrind ישירות על הסקריפט בכל בדיקה, כי זה קצת מסובך.
כרגיל במערכות הפעלה הסקריפט לא יכול לעבוד בפני עצמו, אז בקישור לדרייב יש גם תיקייה של קבצים שהסקריפט צריך שיהיו באותה תיקייה.

קצת הסבר על איך הסקריפט עובד הפעם:
בגלל שהתרגיל הוא לממש API, יש כמה אפשרויות לקבצי C שמשתמשים בהם (נמצאים בתיקייה הנלווית של הטסט).
הטסטים עצמם קוראים לקבצי C השונים בהתאם למקרה ומבצעים:
* קמפול של הקוד שלכם ביחד עם הקובץ C הרלוונטי (אם יש שגיאת קומפילציה, הוא יגיד)
* הרצה ובדיקה כמה פעמים נכתב hello (בהתאם לטסט)
* בדיקה האם הפרוסס קרס
* בדיקה האם עברו יותר מ 20 שניות להרצה של הטסט הספציפי (כדי לנסות לגלות deadlockים)
אם כל הנקודות עברו כמו שצריך, הטסט עובר, אחרת הוא נכשל וכותב את הסיבה.
באופן כללי, בתוך הסקריפט המבנה של כל טסט הוא למשל:
validate "test_simple.c" "10 5 1" "$(repeat_word hello 5)"
כלומר קוראים ל validate, כשהארגומנט הראשון הוא הקובץ C הרלוונטי, הארגומנט השני הוא 3 מספרים (הראשון - כמה threadים, השני - כמה taskים, השלישי - shouldWaitForTasks) והארגומנט האחרון הוא הפלט של פונקציה שמשכפלת hello ככמות הפעמים שהטסט מצפה שיקבל.
לוקח לסקריפט בערך דקה וחצי להריץ את כל הטסטים, כי יש הרבה sleepים כדי לבדוק מצבים שונים.

כמו שהמתרגלים כתבו, אם יש שגיאה של Resource temporarily unavailable זה בגלל הפלאנט וזה בסדר (וכנראה כדאי שתריצו שוב כדי לוודא שזה לא חוזר על עצמו)

לבעלי ה mac - הפקודה timeout שמאפשרת לעצור פרוסס אם הוא לא עצר אחרי זמן מסויים לא קיימת, ויש פקודה מקבילה אבל היא שונה ודורשת התקנה, אז תריצו ב planel
בכל מקרה, כמובן צריך להריץ גם על ה planet.
